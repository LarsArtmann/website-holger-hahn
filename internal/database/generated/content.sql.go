// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: content.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const CreateExperience = `-- name: CreateExperience :one
INSERT INTO experiences (
    company, position, description, achievements, technologies, 
    start_date, end_date, is_current, sort_order
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?
) RETURNING id, company, position, description, achievements, technologies, start_date, end_date, is_current, sort_order, is_active, created_at, updated_at
`

type CreateExperienceParams struct {
	Company      string         `json:"company"`
	Position     string         `json:"position"`
	Description  string         `json:"description"`
	Achievements sql.NullString `json:"achievements"`
	Technologies sql.NullString `json:"technologies"`
	StartDate    time.Time      `json:"start_date"`
	EndDate      sql.NullTime   `json:"end_date"`
	IsCurrent    sql.NullBool   `json:"is_current"`
	SortOrder    sql.NullInt64  `json:"sort_order"`
}

func (q *Queries) CreateExperience(ctx context.Context, arg CreateExperienceParams) (Experience, error) {
	row := q.db.QueryRowContext(ctx, CreateExperience,
		arg.Company,
		arg.Position,
		arg.Description,
		arg.Achievements,
		arg.Technologies,
		arg.StartDate,
		arg.EndDate,
		arg.IsCurrent,
		arg.SortOrder,
	)
	var i Experience
	err := row.Scan(
		&i.ID,
		&i.Company,
		&i.Position,
		&i.Description,
		&i.Achievements,
		&i.Technologies,
		&i.StartDate,
		&i.EndDate,
		&i.IsCurrent,
		&i.SortOrder,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const CreateService = `-- name: CreateService :one
INSERT INTO services (
    title, description, features, icon_svg, color_scheme, sort_order
) VALUES (
    ?, ?, ?, ?, ?, ?
) RETURNING id, title, description, features, icon_svg, color_scheme, sort_order, is_active, created_at, updated_at
`

type CreateServiceParams struct {
	Title       string         `json:"title"`
	Description string         `json:"description"`
	Features    sql.NullString `json:"features"`
	IconSvg     sql.NullString `json:"icon_svg"`
	ColorScheme sql.NullString `json:"color_scheme"`
	SortOrder   sql.NullInt64  `json:"sort_order"`
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (Service, error) {
	row := q.db.QueryRowContext(ctx, CreateService,
		arg.Title,
		arg.Description,
		arg.Features,
		arg.IconSvg,
		arg.ColorScheme,
		arg.SortOrder,
	)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Features,
		&i.IconSvg,
		&i.ColorScheme,
		&i.SortOrder,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const CreateTechnology = `-- name: CreateTechnology :one
INSERT INTO technologies (
    name, category, proficiency_level, icon_class, color_scheme, description, sort_order
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
) RETURNING id, name, category, proficiency_level, icon_class, color_scheme, description, sort_order, is_active, created_at, updated_at
`

type CreateTechnologyParams struct {
	Name             string         `json:"name"`
	Category         string         `json:"category"`
	ProficiencyLevel string         `json:"proficiency_level"`
	IconClass        sql.NullString `json:"icon_class"`
	ColorScheme      sql.NullString `json:"color_scheme"`
	Description      sql.NullString `json:"description"`
	SortOrder        sql.NullInt64  `json:"sort_order"`
}

func (q *Queries) CreateTechnology(ctx context.Context, arg CreateTechnologyParams) (Technology, error) {
	row := q.db.QueryRowContext(ctx, CreateTechnology,
		arg.Name,
		arg.Category,
		arg.ProficiencyLevel,
		arg.IconClass,
		arg.ColorScheme,
		arg.Description,
		arg.SortOrder,
	)
	var i Technology
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.ProficiencyLevel,
		&i.IconClass,
		&i.ColorScheme,
		&i.Description,
		&i.SortOrder,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteExperience = `-- name: DeleteExperience :exec
DELETE FROM experiences WHERE id = ?
`

func (q *Queries) DeleteExperience(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, DeleteExperience, id)
	return err
}

const DeleteService = `-- name: DeleteService :exec
DELETE FROM services WHERE id = ?
`

func (q *Queries) DeleteService(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, DeleteService, id)
	return err
}

const DeleteTechnology = `-- name: DeleteTechnology :exec
DELETE FROM technologies WHERE id = ?
`

func (q *Queries) DeleteTechnology(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, DeleteTechnology, id)
	return err
}

const GetCurrentExperience = `-- name: GetCurrentExperience :one
SELECT id, company, position, description, achievements, technologies, start_date, end_date, is_current, sort_order, is_active, created_at, updated_at FROM experiences 
WHERE is_current = TRUE AND is_active = TRUE
LIMIT 1
`

func (q *Queries) GetCurrentExperience(ctx context.Context) (Experience, error) {
	row := q.db.QueryRowContext(ctx, GetCurrentExperience)
	var i Experience
	err := row.Scan(
		&i.ID,
		&i.Company,
		&i.Position,
		&i.Description,
		&i.Achievements,
		&i.Technologies,
		&i.StartDate,
		&i.EndDate,
		&i.IsCurrent,
		&i.SortOrder,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetExperience = `-- name: GetExperience :one
SELECT id, company, position, description, achievements, technologies, start_date, end_date, is_current, sort_order, is_active, created_at, updated_at FROM experiences WHERE id = ?
`

func (q *Queries) GetExperience(ctx context.Context, id string) (Experience, error) {
	row := q.db.QueryRowContext(ctx, GetExperience, id)
	var i Experience
	err := row.Scan(
		&i.ID,
		&i.Company,
		&i.Position,
		&i.Description,
		&i.Achievements,
		&i.Technologies,
		&i.StartDate,
		&i.EndDate,
		&i.IsCurrent,
		&i.SortOrder,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetService = `-- name: GetService :one
SELECT id, title, description, features, icon_svg, color_scheme, sort_order, is_active, created_at, updated_at FROM services WHERE id = ?
`

func (q *Queries) GetService(ctx context.Context, id string) (Service, error) {
	row := q.db.QueryRowContext(ctx, GetService, id)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Features,
		&i.IconSvg,
		&i.ColorScheme,
		&i.SortOrder,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetTechnology = `-- name: GetTechnology :one
SELECT id, name, category, proficiency_level, icon_class, color_scheme, description, sort_order, is_active, created_at, updated_at FROM technologies WHERE id = ?
`

func (q *Queries) GetTechnology(ctx context.Context, id string) (Technology, error) {
	row := q.db.QueryRowContext(ctx, GetTechnology, id)
	var i Technology
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.ProficiencyLevel,
		&i.IconClass,
		&i.ColorScheme,
		&i.Description,
		&i.SortOrder,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetTechnologyByName = `-- name: GetTechnologyByName :one
SELECT id, name, category, proficiency_level, icon_class, color_scheme, description, sort_order, is_active, created_at, updated_at FROM technologies WHERE name = ? AND is_active = TRUE
`

func (q *Queries) GetTechnologyByName(ctx context.Context, name string) (Technology, error) {
	row := q.db.QueryRowContext(ctx, GetTechnologyByName, name)
	var i Technology
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.ProficiencyLevel,
		&i.IconClass,
		&i.ColorScheme,
		&i.Description,
		&i.SortOrder,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListExperiences = `-- name: ListExperiences :many
SELECT id, company, position, description, achievements, technologies, start_date, end_date, is_current, sort_order, is_active, created_at, updated_at FROM experiences 
WHERE is_active = TRUE
ORDER BY is_current DESC, start_date DESC, sort_order
`

// Experience queries
func (q *Queries) ListExperiences(ctx context.Context) ([]Experience, error) {
	rows, err := q.db.QueryContext(ctx, ListExperiences)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Experience{}
	for rows.Next() {
		var i Experience
		if err := rows.Scan(
			&i.ID,
			&i.Company,
			&i.Position,
			&i.Description,
			&i.Achievements,
			&i.Technologies,
			&i.StartDate,
			&i.EndDate,
			&i.IsCurrent,
			&i.SortOrder,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListServices = `-- name: ListServices :many
SELECT id, title, description, features, icon_svg, color_scheme, sort_order, is_active, created_at, updated_at FROM services 
WHERE is_active = TRUE
ORDER BY sort_order, title
`

// Services queries
func (q *Queries) ListServices(ctx context.Context) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, ListServices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Service{}
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Features,
			&i.IconSvg,
			&i.ColorScheme,
			&i.SortOrder,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListTechnologies = `-- name: ListTechnologies :many
SELECT id, name, category, proficiency_level, icon_class, color_scheme, description, sort_order, is_active, created_at, updated_at FROM technologies 
WHERE is_active = TRUE
ORDER BY category, sort_order, name
`

// Technologies queries
func (q *Queries) ListTechnologies(ctx context.Context) ([]Technology, error) {
	rows, err := q.db.QueryContext(ctx, ListTechnologies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Technology{}
	for rows.Next() {
		var i Technology
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Category,
			&i.ProficiencyLevel,
			&i.IconClass,
			&i.ColorScheme,
			&i.Description,
			&i.SortOrder,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListTechnologiesByCategory = `-- name: ListTechnologiesByCategory :many
SELECT id, name, category, proficiency_level, icon_class, color_scheme, description, sort_order, is_active, created_at, updated_at FROM technologies 
WHERE category = ? AND is_active = TRUE
ORDER BY sort_order, name
`

func (q *Queries) ListTechnologiesByCategory(ctx context.Context, category string) ([]Technology, error) {
	rows, err := q.db.QueryContext(ctx, ListTechnologiesByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Technology{}
	for rows.Next() {
		var i Technology
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Category,
			&i.ProficiencyLevel,
			&i.IconClass,
			&i.ColorScheme,
			&i.Description,
			&i.SortOrder,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListTechnologiesByLevel = `-- name: ListTechnologiesByLevel :many
SELECT id, name, category, proficiency_level, icon_class, color_scheme, description, sort_order, is_active, created_at, updated_at FROM technologies 
WHERE proficiency_level = ? AND is_active = TRUE
ORDER BY category, sort_order, name
`

func (q *Queries) ListTechnologiesByLevel(ctx context.Context, proficiencyLevel string) ([]Technology, error) {
	rows, err := q.db.QueryContext(ctx, ListTechnologiesByLevel, proficiencyLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Technology{}
	for rows.Next() {
		var i Technology
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Category,
			&i.ProficiencyLevel,
			&i.IconClass,
			&i.ColorScheme,
			&i.Description,
			&i.SortOrder,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateExperience = `-- name: UpdateExperience :one
UPDATE experiences 
SET company = ?, position = ?, description = ?, achievements = ?, 
    technologies = ?, start_date = ?, end_date = ?, is_current = ?, 
    sort_order = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, company, position, description, achievements, technologies, start_date, end_date, is_current, sort_order, is_active, created_at, updated_at
`

type UpdateExperienceParams struct {
	Company      string         `json:"company"`
	Position     string         `json:"position"`
	Description  string         `json:"description"`
	Achievements sql.NullString `json:"achievements"`
	Technologies sql.NullString `json:"technologies"`
	StartDate    time.Time      `json:"start_date"`
	EndDate      sql.NullTime   `json:"end_date"`
	IsCurrent    sql.NullBool   `json:"is_current"`
	SortOrder    sql.NullInt64  `json:"sort_order"`
	ID           string         `json:"id"`
}

func (q *Queries) UpdateExperience(ctx context.Context, arg UpdateExperienceParams) (Experience, error) {
	row := q.db.QueryRowContext(ctx, UpdateExperience,
		arg.Company,
		arg.Position,
		arg.Description,
		arg.Achievements,
		arg.Technologies,
		arg.StartDate,
		arg.EndDate,
		arg.IsCurrent,
		arg.SortOrder,
		arg.ID,
	)
	var i Experience
	err := row.Scan(
		&i.ID,
		&i.Company,
		&i.Position,
		&i.Description,
		&i.Achievements,
		&i.Technologies,
		&i.StartDate,
		&i.EndDate,
		&i.IsCurrent,
		&i.SortOrder,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateService = `-- name: UpdateService :one
UPDATE services 
SET title = ?, description = ?, features = ?, icon_svg = ?, 
    color_scheme = ?, sort_order = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, title, description, features, icon_svg, color_scheme, sort_order, is_active, created_at, updated_at
`

type UpdateServiceParams struct {
	Title       string         `json:"title"`
	Description string         `json:"description"`
	Features    sql.NullString `json:"features"`
	IconSvg     sql.NullString `json:"icon_svg"`
	ColorScheme sql.NullString `json:"color_scheme"`
	SortOrder   sql.NullInt64  `json:"sort_order"`
	ID          string         `json:"id"`
}

func (q *Queries) UpdateService(ctx context.Context, arg UpdateServiceParams) (Service, error) {
	row := q.db.QueryRowContext(ctx, UpdateService,
		arg.Title,
		arg.Description,
		arg.Features,
		arg.IconSvg,
		arg.ColorScheme,
		arg.SortOrder,
		arg.ID,
	)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Features,
		&i.IconSvg,
		&i.ColorScheme,
		&i.SortOrder,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateTechnology = `-- name: UpdateTechnology :one
UPDATE technologies 
SET name = ?, category = ?, proficiency_level = ?, icon_class = ?, color_scheme = ?, 
    description = ?, sort_order = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, name, category, proficiency_level, icon_class, color_scheme, description, sort_order, is_active, created_at, updated_at
`

type UpdateTechnologyParams struct {
	Name             string         `json:"name"`
	Category         string         `json:"category"`
	ProficiencyLevel string         `json:"proficiency_level"`
	IconClass        sql.NullString `json:"icon_class"`
	ColorScheme      sql.NullString `json:"color_scheme"`
	Description      sql.NullString `json:"description"`
	SortOrder        sql.NullInt64  `json:"sort_order"`
	ID               string         `json:"id"`
}

func (q *Queries) UpdateTechnology(ctx context.Context, arg UpdateTechnologyParams) (Technology, error) {
	row := q.db.QueryRowContext(ctx, UpdateTechnology,
		arg.Name,
		arg.Category,
		arg.ProficiencyLevel,
		arg.IconClass,
		arg.ColorScheme,
		arg.Description,
		arg.SortOrder,
		arg.ID,
	)
	var i Technology
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.ProficiencyLevel,
		&i.IconClass,
		&i.ColorScheme,
		&i.Description,
		&i.SortOrder,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
