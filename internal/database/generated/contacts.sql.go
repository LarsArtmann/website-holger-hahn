// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: contacts.sql

package database

import (
	"context"
	"database/sql"
)

const CountContacts = `-- name: CountContacts :one
SELECT COUNT(*) FROM contacts
`

func (q *Queries) CountContacts(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountContacts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountContactsByStatus = `-- name: CountContactsByStatus :one
SELECT COUNT(*) FROM contacts WHERE status = ?
`

func (q *Queries) CountContactsByStatus(ctx context.Context, status sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountContactsByStatus, status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateContact = `-- name: CreateContact :one
INSERT INTO contacts (
    name, email, company, message, subject, source
) VALUES (
    ?, ?, ?, ?, ?, ?
) RETURNING id, name, email, company, message, subject, created_at, updated_at, status, source
`

type CreateContactParams struct {
	Name    string         `json:"name"`
	Email   string         `json:"email"`
	Company sql.NullString `json:"company"`
	Message string         `json:"message"`
	Subject sql.NullString `json:"subject"`
	Source  sql.NullString `json:"source"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, CreateContact,
		arg.Name,
		arg.Email,
		arg.Company,
		arg.Message,
		arg.Subject,
		arg.Source,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Company,
		&i.Message,
		&i.Subject,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Source,
	)
	return i, err
}

const DeleteContact = `-- name: DeleteContact :exec
DELETE FROM contacts WHERE id = ?
`

func (q *Queries) DeleteContact(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, DeleteContact, id)
	return err
}

const GetContact = `-- name: GetContact :one
SELECT id, name, email, company, message, subject, created_at, updated_at, status, source FROM contacts WHERE id = ?
`

func (q *Queries) GetContact(ctx context.Context, id string) (Contact, error) {
	row := q.db.QueryRowContext(ctx, GetContact, id)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Company,
		&i.Message,
		&i.Subject,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Source,
	)
	return i, err
}

const GetContactByEmail = `-- name: GetContactByEmail :one
SELECT id, name, email, company, message, subject, created_at, updated_at, status, source FROM contacts WHERE email = ? ORDER BY created_at DESC LIMIT 1
`

func (q *Queries) GetContactByEmail(ctx context.Context, email string) (Contact, error) {
	row := q.db.QueryRowContext(ctx, GetContactByEmail, email)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Company,
		&i.Message,
		&i.Subject,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Source,
	)
	return i, err
}

const ListContacts = `-- name: ListContacts :many
SELECT id, name, email, company, message, subject, created_at, updated_at, status, source FROM contacts 
ORDER BY created_at DESC 
LIMIT ? OFFSET ?
`

type ListContactsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListContacts(ctx context.Context, arg ListContactsParams) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, ListContacts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contact{}
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Company,
			&i.Message,
			&i.Subject,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.Source,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListContactsByStatus = `-- name: ListContactsByStatus :many
SELECT id, name, email, company, message, subject, created_at, updated_at, status, source FROM contacts 
WHERE status = ?
ORDER BY created_at DESC 
LIMIT ? OFFSET ?
`

type ListContactsByStatusParams struct {
	Status sql.NullString `json:"status"`
	Limit  int64          `json:"limit"`
	Offset int64          `json:"offset"`
}

func (q *Queries) ListContactsByStatus(ctx context.Context, arg ListContactsByStatusParams) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, ListContactsByStatus, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contact{}
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Company,
			&i.Message,
			&i.Subject,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.Source,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateContactStatus = `-- name: UpdateContactStatus :one
UPDATE contacts 
SET status = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, name, email, company, message, subject, created_at, updated_at, status, source
`

type UpdateContactStatusParams struct {
	Status sql.NullString `json:"status"`
	ID     string         `json:"id"`
}

func (q *Queries) UpdateContactStatus(ctx context.Context, arg UpdateContactStatusParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, UpdateContactStatus, arg.Status, arg.ID)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Company,
		&i.Message,
		&i.Subject,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Source,
	)
	return i, err
}
