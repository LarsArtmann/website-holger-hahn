// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: analytics.sql

package database

import (
	"context"
	"database/sql"
)

const CreateAnalyticsEvent = `-- name: CreateAnalyticsEvent :one
INSERT INTO analytics_events (
    event_type, page_path, user_agent, ip_address, session_id, referrer, metadata
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
) RETURNING id, event_type, page_path, user_agent, ip_address, session_id, referrer, metadata, created_at
`

type CreateAnalyticsEventParams struct {
	EventType string         `json:"event_type"`
	PagePath  sql.NullString `json:"page_path"`
	UserAgent sql.NullString `json:"user_agent"`
	IpAddress sql.NullString `json:"ip_address"`
	SessionID sql.NullString `json:"session_id"`
	Referrer  sql.NullString `json:"referrer"`
	Metadata  sql.NullString `json:"metadata"`
}

func (q *Queries) CreateAnalyticsEvent(ctx context.Context, arg CreateAnalyticsEventParams) (AnalyticsEvent, error) {
	row := q.db.QueryRowContext(ctx, CreateAnalyticsEvent,
		arg.EventType,
		arg.PagePath,
		arg.UserAgent,
		arg.IpAddress,
		arg.SessionID,
		arg.Referrer,
		arg.Metadata,
	)
	var i AnalyticsEvent
	err := row.Scan(
		&i.ID,
		&i.EventType,
		&i.PagePath,
		&i.UserAgent,
		&i.IpAddress,
		&i.SessionID,
		&i.Referrer,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const DeleteOldAnalyticsEvents = `-- name: DeleteOldAnalyticsEvents :exec
DELETE FROM analytics_events
WHERE created_at < datetime('now', '-90 days')
`

func (q *Queries) DeleteOldAnalyticsEvents(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, DeleteOldAnalyticsEvents)
	return err
}

const GetAnalyticsEvent = `-- name: GetAnalyticsEvent :one
SELECT id, event_type, page_path, user_agent, ip_address, session_id, referrer, metadata, created_at FROM analytics_events WHERE id = ?
`

func (q *Queries) GetAnalyticsEvent(ctx context.Context, id string) (AnalyticsEvent, error) {
	row := q.db.QueryRowContext(ctx, GetAnalyticsEvent, id)
	var i AnalyticsEvent
	err := row.Scan(
		&i.ID,
		&i.EventType,
		&i.PagePath,
		&i.UserAgent,
		&i.IpAddress,
		&i.SessionID,
		&i.Referrer,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const GetEventCountsByType = `-- name: GetEventCountsByType :many
SELECT
    event_type,
    COUNT(*) as event_count,
    DATE(created_at) as date
FROM analytics_events
WHERE created_at >= datetime('now', '-30 days')
GROUP BY event_type, DATE(created_at)
ORDER BY date DESC, event_count DESC
`

type GetEventCountsByTypeRow struct {
	EventType  string      `json:"event_type"`
	EventCount int64       `json:"event_count"`
	Date       interface{} `json:"date"`
}

func (q *Queries) GetEventCountsByType(ctx context.Context) ([]GetEventCountsByTypeRow, error) {
	rows, err := q.db.QueryContext(ctx, GetEventCountsByType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetEventCountsByTypeRow{}
	for rows.Next() {
		var i GetEventCountsByTypeRow
		if err := rows.Scan(&i.EventType, &i.EventCount, &i.Date); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetPageViewStats = `-- name: GetPageViewStats :many
SELECT
    page_path,
    COUNT(*) as view_count,
    COUNT(DISTINCT session_id) as unique_visitors,
    DATE(created_at) as date
FROM analytics_events
WHERE event_type = 'page_view'
    AND created_at >= datetime('now', '-30 days')
GROUP BY page_path, DATE(created_at)
ORDER BY date DESC, view_count DESC
`

type GetPageViewStatsRow struct {
	PagePath       sql.NullString `json:"page_path"`
	ViewCount      int64          `json:"view_count"`
	UniqueVisitors int64          `json:"unique_visitors"`
	Date           interface{}    `json:"date"`
}

func (q *Queries) GetPageViewStats(ctx context.Context) ([]GetPageViewStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetPageViewStats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPageViewStatsRow{}
	for rows.Next() {
		var i GetPageViewStatsRow
		if err := rows.Scan(
			&i.PagePath,
			&i.ViewCount,
			&i.UniqueVisitors,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListAnalyticsEvents = `-- name: ListAnalyticsEvents :many
SELECT id, event_type, page_path, user_agent, ip_address, session_id, referrer, metadata, created_at FROM analytics_events
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListAnalyticsEventsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListAnalyticsEvents(ctx context.Context, arg ListAnalyticsEventsParams) ([]AnalyticsEvent, error) {
	rows, err := q.db.QueryContext(ctx, ListAnalyticsEvents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnalyticsEvent{}
	for rows.Next() {
		var i AnalyticsEvent
		if err := rows.Scan(
			&i.ID,
			&i.EventType,
			&i.PagePath,
			&i.UserAgent,
			&i.IpAddress,
			&i.SessionID,
			&i.Referrer,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListAnalyticsEventsByType = `-- name: ListAnalyticsEventsByType :many
SELECT id, event_type, page_path, user_agent, ip_address, session_id, referrer, metadata, created_at FROM analytics_events
WHERE event_type = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListAnalyticsEventsByTypeParams struct {
	EventType string `json:"event_type"`
	Limit     int64  `json:"limit"`
	Offset    int64  `json:"offset"`
}

func (q *Queries) ListAnalyticsEventsByType(ctx context.Context, arg ListAnalyticsEventsByTypeParams) ([]AnalyticsEvent, error) {
	rows, err := q.db.QueryContext(ctx, ListAnalyticsEventsByType, arg.EventType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnalyticsEvent{}
	for rows.Next() {
		var i AnalyticsEvent
		if err := rows.Scan(
			&i.ID,
			&i.EventType,
			&i.PagePath,
			&i.UserAgent,
			&i.IpAddress,
			&i.SessionID,
			&i.Referrer,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
