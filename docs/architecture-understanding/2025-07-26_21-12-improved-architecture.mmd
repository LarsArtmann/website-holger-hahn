```mermaid
graph TB
    %% Improved Application Architecture - Unified, Clean, and Persistent
    
    subgraph "HTTP Layer"
        HTTP["`**HTTP Server**
        *Gin Router + Middleware*
        - Single Entry Point
        - Rate Limiting
        - Analytics Middleware
        - Static File Serving
        - Health Monitoring`"]
    end
    
    subgraph "Handler Layer - Clean Separation"
        PH["`**Portfolio Handlers**
        *Presentation Layer*
        - Home Page Rendering
        - Technologies API
        - Experiences API
        - Services API
        - Health & Metrics`"]
        
        CH["`**Contact Handler**
        *Presentation Layer*
        - Form Submission
        - Validation
        - Response Building
        - Rate Limiting`"]
        
        AH["`**Analytics Handler**
        *NEW - Metrics Layer*
        - Event Tracking
        - Dashboard API
        - Performance Metrics`"]
    end
    
    subgraph "âœ… UNIFIED CONTAINER SYSTEM"
        UC["`**Unified DI Container**
        *Single Source of Truth*
        - Configuration Management
        - Service Registration
        - Repository Registration
        - Infrastructure Registration
        - Lifecycle Management`"]
    end
    
    subgraph "Application Layer - Use Cases"
        subgraph "Portfolio Use Cases"
            PUC["`**Portfolio Use Cases**
            *Application Services*
            - Technology Management
            - Experience Showcase
            - Service Portfolio
            - Content Management`"]
        end
        
        subgraph "Contact Use Cases"
            CUC["`**Contact Use Cases**
            *Application Services*
            - Form Processing
            - Email Workflows
            - Lead Management
            - CRM Integration`"]
        end
        
        subgraph "Analytics Use Cases"
            AUC["`**Analytics Use Cases**
            *NEW - Business Intelligence*
            - Event Processing
            - Metrics Aggregation
            - Performance Tracking
            - Business Insights`"]
        end
    end
    
    subgraph "Domain Layer - Business Logic"
        subgraph "Domain Services"
            TDS["`**Technology Domain**
            *Business Logic*
            - Skill Assessment
            - Technology Evolution
            - Expertise Validation`"]
            
            EDS["`**Experience Domain**
            *Business Logic*
            - Career Progression
            - Achievement Metrics
            - Impact Calculation`"]
            
            SDS["`**Service Domain**
            *Business Logic*
            - Service Definition
            - Pricing Strategy
            - Delivery Planning`"]
            
            CDS["`**Contact Domain**
            *Business Logic*
            - Lead Qualification
            - Communication Rules
            - Follow-up Logic`"]
        end
        
        subgraph "Domain Events"
            DE["`**Domain Events**
            *Event-Driven Architecture*
            - Contact Submitted
            - Service Viewed
            - Technology Updated
            - Experience Added`"]
        end
    end
    
    subgraph "Repository Layer - Unified Data Access"
        subgraph "Database Repositories"
            TR["`**Technology Repository**
            *SQLite + SQLC*
            - CRUD Operations
            - Category Queries
            - Skill Level Filtering
            - Performance Optimized`"]
            
            ER["`**Experience Repository**
            *SQLite + SQLC*
            - Career Timeline
            - Achievement Tracking
            - Technology Mapping
            - Metric Calculations`"]
            
            SR["`**Service Repository**
            *SQLite + SQLC*
            - Service Catalog
            - Pricing Management
            - Availability Tracking
            - Category Organization`"]
            
            CR["`**Contact Repository**
            *SQLite + SQLC*
            - Lead Management
            - Communication History
            - Status Tracking
            - Follow-up Scheduling`"]
            
            AR["`**Analytics Repository**
            *SQLite + SQLC*
            - Event Storage
            - Metrics Aggregation
            - Performance Tracking
            - Insight Generation`"]
        end
        
        subgraph "Unit of Work Pattern"
            UOW["`**Unit of Work**
            *Transaction Management*
            - Cross-Repository Transactions
            - Data Consistency
            - Rollback Support
            - Performance Optimization`"]
        end
    end
    
    subgraph "Infrastructure Layer - External Services"
        subgraph "Database System"
            DM["`**Database Manager**
            *SQLite + Connection Pool*
            - Connection Management
            - Transaction Coordination
            - Migration Support
            - Health Monitoring
            - Performance Metrics`"]
            
            DB[("`**SQLite Database**
            *Persistent Storage*
            - ACID Transactions
            - WAL Mode
            - Full-Text Search
            - Backup Support
            - Analytics Tables`")]
        end
        
        subgraph "External Services"
            ES_SMTP["`**Email Service**
            *SMTP + Templates*
            - Transactional Emails
            - Template Management
            - Delivery Tracking
            - Error Handling`"]
            
            LS["`**Logging Service**
            *Structured Logging*
            - Event Correlation
            - Error Tracking
            - Performance Monitoring
            - Alert Management`"]
            
            CS_CACHE["`**Cache Service**
            *NEW - Performance*
            - Response Caching
            - Database Query Cache
            - Static Asset Cache
            - CDN Integration`"]
        end
        
        subgraph "Event System"
            EB["`**Event Bus**
            *NEW - Event Processing*
            - Event Publishing
            - Subscriber Management
            - Error Handling
            - Async Processing`"]
        end
    end
    
    subgraph "Template & Asset System"
        TEMPL["`**Templ Templates**
        *Server-Side Rendering*
        - Type-Safe HTML
        - Component System
        - Performance Optimized
        - SEO Friendly`"]
        
        CSS["`**Optimized CSS**
        *TailwindCSS + Build*
        - Purged Styles
        - Minified Output
        - Component Classes
        - Responsive Design`"]
        
        IMG["`**Asset Pipeline**
        *Optimized Delivery*
        - Image Optimization
        - Lazy Loading
        - CDN Integration
        - Format Selection`"]
    end
    
    %% Connections - Improved Flow
    HTTP --> PH
    HTTP --> CH
    HTTP --> AH
    
    PH --> UC
    CH --> UC
    AH --> UC
    
    UC --> PUC
    UC --> CUC
    UC --> AUC
    
    PUC --> TDS
    PUC --> EDS
    PUC --> SDS
    CUC --> CDS
    AUC --> DE
    
    TDS --> TR
    EDS --> ER
    SDS --> SR
    CDS --> CR
    AUC --> AR
    
    TR --> UOW
    ER --> UOW
    SR --> UOW
    CR --> UOW
    AR --> UOW
    
    UOW --> DM
    DM --> DB
    
    CUC --> ES_SMTP
    PUC --> LS
    CUC --> LS
    AUC --> LS
    
    DE --> EB
    EB --> AUC
    
    PUC --> CS_CACHE
    AUC --> CS_CACHE
    
    PH --> TEMPL
    HTTP --> CSS
    HTTP --> IMG
    
    %% Analytics Flow
    HTTP -.->|"Event Tracking"| AUC
    PH -.->|"Page Views"| AUC
    CH -.->|"Form Events"| AUC
    
    %% Styling
    classDef improved fill:#e8f5e8,stroke:#4caf50,stroke-width:3px
    classDef new fill:#e3f2fd,stroke:#2196f3,stroke-width:2px
    classDef unified fill:#fff3e0,stroke:#ff9800,stroke-width:2px
    classDef infrastructure fill:#f3e5f5,stroke:#9c27b0,stroke-width:2px
    
    class UC,UOW,DM,DB improved
    class AH,AUC,AR,EB,CS_CACHE new
    class PUC,CUC,TDS,EDS,SDS,CDS unified
    class ES_SMTP,LS,TEMPL,CSS,IMG infrastructure
    
    %% Annotations with Benefits
    UC -.->|"Single Source of Truth"| PUC
    UC -.->|"Consistent Configuration"| CUC
    UOW -.->|"Data Consistency"| DB
    DE -.->|"Loose Coupling"| EB
```

**Improved Architecture Benefits:**

1. **Unified Container**: Single DI container eliminates dual container problems
2. **Full Database Integration**: SQLite infrastructure actively used for persistence
3. **Event-Driven Design**: Domain events enable loose coupling and extensibility
4. **Analytics Integration**: Complete user behavior tracking and business insights
5. **Performance Optimization**: Caching, connection pooling, and query optimization
6. **Clean Architecture**: Clear separation of concerns with DDD principles

**Key Improvements:**
- **Data Persistence**: All data survives restarts and scales
- **Business Intelligence**: Analytics provide actionable insights
- **Maintainability**: Clean separation makes changes easier
- **Performance**: Optimized data access and caching
- **Scalability**: Event-driven architecture supports growth
- **Reliability**: Transaction management ensures data consistency

**Architecture Patterns Applied:**
- **Clean Architecture**: Clear layer separation
- **Domain-Driven Design**: Business logic in domain layer
- **Repository Pattern**: Data access abstraction
- **Unit of Work**: Transaction management
- **Event-Driven**: Loose coupling via events
- **Dependency Injection**: IoC container management